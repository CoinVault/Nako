@page "/fetchblocks"
@page "/fetchblocks/{blockindex:int}/{blockcount:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject GlobalData globalData

@if (blocks == null)
{
    <section class="block-explorer-section section bg-bottom">
        <div class="container">
            <div class="row">
                <div style="margin:0 auto; min-height: 500px">
                    <div class="spinner-grow" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <section class="block-explorer-section section bg-bottom">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="center-heading">
                        <h2 class="section-title">Latest Blocks</h2>
                    </div>
                </div>
                <div class="offset-lg-3 col-lg-6">
                    <div class="center-text">
                        <p>Scroll to the bottom to fetch more blocks</p>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="table-responsive">
                        <table class="table table-striped table-latests">
                            <thead>
                            <tr>
                                <td>Block Height</td>
                                <td>Age</td>
                                <td>Transactions</td>
                                <td>Size</td>
                                <td>Difficulty</td>
                            </tr>
                            </thead>
                            <tbody>
                            <tbody>
                            </tbody>
                            @foreach (var block in blocks.Blocks)
                            {

                                <tr>
                                    <td><a class="mousepointer" @onclick="@(() => NavigateToBlockIndex(block.BlockIndex))">@block.BlockIndex</a></td>
                                    <td>@UnixTimeToDateTime(@block.BlockTime)</td>
                                    <td>@block.TransactionCount</td>
                                    <td>@block.BlockSize KB</td>
                                    <td>@block.Bits</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="center-heading">
                        <button type="button" @onclick="NavigateToMoreBlocks" class="btn btn-light">Fetch more blocks</button>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

    @code {
        [Parameter]
        public int? blockindex { get; set; }

        [Parameter]
        public int? blockcount { get; set; }

        DataTypes.QueryBlocks blocks;

        private async Task NavigateToMoreBlocks()
        {
            var blk = blocks.Blocks.Last();
            var moreblocks = await Http.GetJsonAsync<DataTypes.QueryBlocks>($"http://{this.globalData.ApiUrl}/api/Query/block/Index/{blk.BlockIndex - 1}/Count/{this.blockcount}?api-version=1.0");

            moreblocks.Blocks = this.blocks.Blocks.Concat(moreblocks.Blocks).ToArray();

            this.blocks = moreblocks;
        }

        private void NavigateToBlockIndex(long index)
        {
            NavigationManager.NavigateTo($"fetchblock/{index}");
        }

        protected override async Task OnInitializedAsync()
        {
            if (this.blockcount == null)
                this.blockcount = 10;

            if (this.blockindex == null)
                this.blockindex = -1;

            blocks = await Http.GetJsonAsync<DataTypes.QueryBlocks>($"http://{this.globalData.ApiUrl}/api/Query/block/Index/{this.blockindex}/Count/{this.blockcount}?api-version=1.0");
        }

        public static string UnixTimeToDateTime(long timestamp)
        {

            var blocktime = GlobalData.UnixTimeToDateTime((ulong)timestamp);

            return GlobalData.DateTimeAgo(blocktime);

            //var ret = (DateTime.UtcNow - blocktime).ToString();

            //ret = ret.Substring(0, ret.IndexOf("."));

            //return ret;

        }

    }
