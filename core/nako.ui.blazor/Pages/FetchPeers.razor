@page "/fetchpeers"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject GlobalData globalData



@if (peers == null)
{
    <section class="block-explorer-section section bg-bottom">
        <div class="container">
            <div class="row">
                <div style="margin:0 auto; min-height: 500px">
                    <div class="spinner-grow" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <section class="block-explorer-section section bg-bottom">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="center-heading">
                        <h2 class="section-title">@this.peers.Count() Network Peers</h2>
                    </div>
                </div>
                <div class="offset-lg-3 col-lg-6">
                    <div class="center-text">
                        <p></p>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="table-responsive">
                        <table class="table table-striped table-latests">
                            <thead>
                                <tr>
                                    <th>Agent</th>
                                    <th>count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var peerInfos in this.peers.GroupBy(p => p.SubVer))
                                {
                                    <tr class="mousepointer" @onclick="@(() =>  ShowAgent(@peerInfos.Key))">
                                        <td>@peerInfos.Key</td>
                                        <td>@peerInfos.Count()</td>
                                    </tr>
                                }
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>

           @if (!string.IsNullOrEmpty(this.showAgent))
           {
               <div class="row">
                   <div class="col-lg-12">
                       <div class="center-heading">
                           <h2 class="section-title">Network Peers</h2>
                       </div>
                   </div>

                   <div class="col-lg-12">
                       <div class="table-responsive">
                           <table class="table table-striped table-latests">
                               <thead>
                               <tr>
                                   <th>IP address</th>
                                   <th>Inbound</th>
                                   <th>Version</th>
                                   <th>Agent</th>
                               </tr>
                               </thead>
                               <tbody>
                               @foreach (var peer in this.peers.Where(p => p.SubVer == this.showAgent))
                               {
                                   <tr>
                                       <td>@peer.Addr</td>
                                       <td>@(peer.Inbound ? "Inbound" : "Outbound")</td>
                                       <td>@peer.Version</td>
                                       <td>@peer.SubVer</td>
                                   </tr>
                               }
                               </tbody>

                           </table>
                       </div>
                   </div>
               </div>
           }
        </div>
    </section>
}

@code {

    DataTypes.PeerInfo[] peers;

    string showAgent;

    private void ShowAgent(string agent)
    {
        this.showAgent = agent;
    }

    private void NavigateToBlockIndex(long index)
    {
        NavigationManager.NavigateTo("fetchblock/" + index);
    }

    protected override async Task OnInitializedAsync()
    {
        peers = await Http.GetJsonAsync<DataTypes.PeerInfo[]>($"http://{this.globalData.ApiUrl}/api/stats/peers?api-version=1.0");
    }

}
